#!/bin/sh
#
# ┌─────────────────────────────────────────┐
# │                AlpineBox                │
# └─────────────────────────────────────────┘
#
# AlpineBox is a simple shell-based tool that allows
# you to create and manage Alpine Linux rootfs containers
# easily using PRoot.
#
# Author: Mauricio Ferrari
# License: MIT

vr="1.7"

_msg_err_no_rootfs()
{
    test -d "$ALPINEBOX_ROOTFS" && return 0
    echo \
"═══════════════════════════════════════════════════════════
  Error: rootfs directory not found.

  Expected location:
    -> $ALPINEBOX_ROOTFS

  Please run the following command to set it up:
  ╔════════════════════════════════════════════╗
  ║ $ AlpineBox setup                          ║
  ╚════════════════════════════════════════════╝
═══════════════════════════════════════════════════════════"
exit 1
}

_check_deps()
{
    test "${IS_APPIMAGE:-0}" -eq 1 && {
        echo "Skipping dependency checks: this application is distributed as an AppImage and includes all required libraries."
        exit 0
    }

    for c in cp false find grep gzip mkdir proot tar tr true rm sed uname wget
    do
        command -v "$c" || echo "$c - not found"
    done
    exit 0
}


_run()
{
    _msg_err_no_rootfs

    # default -R:
    #  * /etc/host.conf
    #  * /etc/hosts
    #  * /etc/hosts.equiv
    #  * /etc/mtab
    #  * /etc/netgroup
    #  * /etc/networks
    #  * /etc/passwd
    #  * /etc/group
    #  * /etc/nsswitch.conf
    #  * /etc/resolv.conf
    #  * /etc/localtime
    #  * /dev/
    #  * /sys/
    #  * /proc/
    #  * /tmp/
    #  * /run/
    #  * /var/run/dbus/system_bus_socket
    #  * $HOME

    proot_options="-R $ALPINEBOX_ROOTFS --bind=/media --bind=/mnt $proot_args"

    test "${no_extra_binds:-0}" -eq 1 || {
        test -e "/etc/asound.conf" && proot_options="$proot_options --bind=/etc/asound.conf"
        test -e "/etc/fonts" && proot_options="$proot_options --bind=/etc/fonts"
        test -e "/usr/share/font-config" && proot_options="$proot_options --bind=/usr/share/font-config"
        test -e "/usr/share/fontconfig" && proot_options="$proot_options --bind=/usr/share/fontconfig"
        test -e "/usr/share/fonts" && proot_options="$proot_options --bind=/usr/share/fonts"
        test -e "/usr/share/themes" && proot_options="$proot_options --bind=/usr/share/themes"

        for dir in $(find /usr/share/icons -type d -name 'cursors'); do
            proot_options="$proot_options --bind=$dir"
        done
    }

    ALPINEBOX_CMD="${internal_cmd:-$ALPINEBOX_CMD}"  # prevent future bugs
    ALPINEBOX_CMD="${ALPINEBOX_CMD:-$cmd_args}"

    # shellcheck disable=SC2086
    proot ${use_root:+-0} $proot_options /usr/bin/env PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/libexec" /bin/sh ${ALPINEBOX_CMD:+-c "$ALPINEBOX_CMD"}
}


_update()
{
    _msg_err_no_rootfs

    use_root=1
    no_extra_binds=1
    internal_cmd="apk update && apk upgrade"
    _run
}


_extract_static()
{
    _msg_err_no_rootfs

    use_root=1
    no_extra_binds=1
    internal_cmd="
        command -v $extract_cmd.static || {
            pkgs=\"\$(apk search $extract_cmd.static | grep -Eo \".*-static\")\"
            test -z \"\$pkgs\" || apk add \$pkgs
            true
        }
    "
    _run

    find "$ALPINEBOX_ROOTFS"/usr/bin -name "$extract_cmd.static" -exec cp {} "${extract_output:-$def_output_dir}" \;
    find "$ALPINEBOX_ROOTFS"/bin -name "$extract_cmd.static" -exec cp {} "${extract_output:-$def_output_dir}" \;

    echo "$extract_cmd.static saved in ${extract_output:-$def_output_dir}"
}


_setup()
{
    test "${reinstall_rootfs:-0}" -eq 1 || {
        test -d "$ALPINEBOX_ROOTFS" && {
            echo "Rootfs directory $ALPINEBOX_ROOTFS is already available. Use [-r|--reinstall] to reinstall it."
            exit 0
        }
    }

    ALPINEBOX_ROOTFS_VERSION="${ALPINEBOX_ROOTFS_VERSION:-"$(wget -qO- "$mirror" | grep -Eom1 "alpine-minirootfs-([0-9]+[.])+[0-9]+" | grep -Eom1 "([0-9]+[.])+[0-9]+")"}"
    echo "Alpine rootfs version $ALPINEBOX_ROOTFS_VERSION"

    tarball="alpine-minirootfs-$ALPINEBOX_ROOTFS_VERSION-$ALPINEBOX_ARCH.tar.gz"

    test -f "$ALPINEBOX_CACHE/$tarball" || {
        rm -rf "$ALPINEBOX_CACHE"
        mkdir -p "$ALPINEBOX_CACHE"
        wget -c -O "$ALPINEBOX_CACHE/$tarball" "${mirror}$tarball"
    }
    echo "$ALPINEBOX_CACHE/$tarball"

    rm -rf "$ALPINEBOX_ROOTFS"
    mkdir -p "$ALPINEBOX_ROOTFS"
    tar -xzvf "$ALPINEBOX_CACHE/$tarball" -C "$ALPINEBOX_ROOTFS"

    test "$using_repo" = "edge" && echo \
"http://dl-cdn.alpinelinux.org/alpine/edge/main
http://dl-cdn.alpinelinux.org/alpine/edge/community
http://dl-cdn.alpinelinux.org/alpine/edge/testing
" > "$ALPINEBOX_ROOTFS/etc/apk/repositories"

    test "$using_repo" = "latest-stable" && echo \
"http://dl-cdn.alpinelinux.org/alpine/latest-stable/main
http://dl-cdn.alpinelinux.org/alpine/latest-stable/community
" > "$ALPINEBOX_ROOTFS/etc/apk/repositories"

    _update

    test "${no_sdk:-0}" -eq 1 || {
        use_root=1
        no_extra_binds=1
        internal_cmd='apk add alpine-sdk'
        _run
    }

echo \
"═══════════════════════════════════════════════════════════
  Installation completed successfully!

  To start the environment, run:
  ╔════════════════════════════════════╗
  ║ $ AlpineBox run                    ║
  ╚════════════════════════════════════╝
═══════════════════════════════════════════════════════════"
}


_create_appdir()
{
    ALPINEBOX_ROOTFS="$ALPINEBOX_SAVE_APPDIR/$pkg_name.AppDir"
    no_sdk=1
    reinstall_rootfs=1
    _setup

    use_root=1
    no_extra_binds=1
    internal_cmd="apk add $pkg_name"
    _run
    exit 0
}


_remove_rootfs()
{
    rm -rf "$remove_rootfs"
    echo "The rootfs <$remove_rootfs> has been successfully removed."
    exit 0
}

_extract_deps() {
    var="$1"
    file="$2"
    in_block=0
    result=""

    while IFS= read -r line || [ -n "$line" ]; do
        case "$line" in
            "$var="*)
                in_block=1
                line=${line#*=}
                line=${line#\"}
                ;;
        esac

        if [ "$in_block" -eq 1 ]; then
            case "$line" in
                *\" )
                    in_block=0
                    line=${line%\"}
                    ;;
            esac
            result="$result $line"
        fi
    done < "$file"

    echo "$result" | sed -e 's/[><=][^[:space:]]*//g' | tr '\t' ' ' | tr -s ' ' | sed 's/^ *//;s/ *$//'
}


_apk_build()
{
    _msg_err_no_rootfs
    test -z "$apkbuild_local" && apkbuild_local="APKBUILD"

    test -e "$apkbuild_local" || {
        echo "No APKBUILD file found in the specified or current path."
        exit 1
    }

    test -d "$apkbuild_local" && {
        apkbuild_file="${apkbuild_local%/}/APKBUILD"
        apkbuild_name="$(grep -E "^pkgname" "$apkbuild_file")"
        apkbuild_name="${apkbuild_name#*=}"
        mkdir -pv "$ALPINEBOX_ROOTFS/build"
        cp -av "$apkbuild_local" "$ALPINEBOX_ROOTFS/build"
    }

    test -f "$apkbuild_local" && {
        apkbuild_file=$apkbuild_local
        apkbuild_name="$(grep -E "^pkgname" "$apkbuild_file")"
        apkbuild_name="${apkbuild_name#*=}"
        mkdir -pv "$ALPINEBOX_ROOTFS/build/$apkbuild_name"
        cp -av "$apkbuild_file" "$ALPINEBOX_ROOTFS/build/$apkbuild_name/APKBUILD"
    }

    deps=$(_extract_deps depends "$apkbuild_file")
    make_deps=$(_extract_deps makedepends "$apkbuild_file")
    check_deps=$(_extract_deps checkdepends "$apkbuild_file")
    echo "depends: $deps"
    echo "makedepends: $make_deps"
    echo "checkdepends: $check_deps"
    extract_deps="$deps $make_deps $check_deps"

    _update
    internal_cmd="
        which abuild > /dev/null || apk add alpine-sdk
        HOME=/build
        test -f /etc/apk/keys/$USER*.rsa.pub && exit
        rm -rf /build/.abuild
        abuild-keygen -a -n
        cp -v /build/.abuild/$USER*.rsa.pub /etc/apk/keys/
    "
    _run

    use_root=1
    no_extra_binds=1
    internal_cmd="
        apk add $extract_deps
        HOME=/build
        cd /build/$apkbuild_name
        abuild -r -F -d
        find \"/build/packages/build/$ALPINEBOX_ARCH\" -name \"$apkbuild_name\"*.apk -exec apk add --allow-untrusted {} \;
    "
    _run
}


_aports_update()
{
    internal_cmd="
        which git > /dev/null || apk add git
        cd /build
        git clone --depth=1 --filter=tree:0 --no-checkout https://github.com/alpinelinux/aports.git 2> /dev/null || true
        cd ./aports/
        git fetch --depth=1 --filter=tree:0
        git ls-tree -r HEAD --name-only | grep -E \"(community|main|testing)\" > ../aports-database
    "
    _run
}


_aports()
{
    _msg_err_no_rootfs
    mkdir -pv "$ALPINEBOX_ROOTFS/build"

    _aports_update
    result="$(grep "/$APORTS_PKG/" "$ALPINEBOX_ROOTFS/build/aports-database" || true)"

    test "${aports_search:-0}" -eq 1 && {
        echo "════════════════════════════════════════════════════════════"
        echo "╔═════════╗"
        echo "║ RESULT: ║"
        echo "╚═════════╝"
        echo "$result"
        echo "════════════════════════════════════════════════════════════"
        return 0
    }

    apkbuild_dir="$(echo "$result" | grep "APKBUILD")"
    apkbuild_dir="${apkbuild_dir%/*}"

    test "${aports_get:-0}" -eq 1 && {
        internal_cmd="
            cd /build/aports
            git sparse-checkout init --cone
            git sparse-checkout set $apkbuild_dir
            git checkout
        "
        _run

        cp -nav "$ALPINEBOX_ROOTFS/build/aports/$apkbuild_dir" "${extract_output:-$def_output_dir}"
        echo "$apkbuild_dir saved in ${extract_output:-$def_output_dir}"
    }
}


_print_help()
{
echo "╔══════════════════════════════════════════════════════════╗"
echo "║                  AlpineBox Version $vr                   ║"
echo "╠══════════════════════════════════════════════════════════╣"
echo "║                                                          ║"
echo "║ AlpineBox is a simple shell-based tool that allows you   ║"
echo "║ to create and manage Alpine Linux rootfs containers      ║"
echo "║ easily using PRoot.                                      ║"
echo "║                                                          ║"
echo "║ Usage: AlpineBox <parameters> [options] [--] [ARGS...]   ║"
echo "║                                                          ║"
echo "╚══════════════════════════════════════════════════════════╝"

# shellcheck disable=SC2016
echo '
╔════════════════════════╗
║ Available parameters:  ║
╠════════════════════════╩═════════╦═══════════════════════
║ setup                            ║ Install/reinstall the rootfs system
║ run                              ║ Run rootfs system using proot
║ tools                            ║ Manage or build inside the rootfs
║ aports                           ║ Get APKBUILDs from the aports repository
║ --check-deps                     ║ Verify all required dependencies
║ -h, --help                       ║ Show this help message and exit
║ -v, --version                    ║ Show the script version and exit
╚══════════════════════════════════╩═══════════════════════
╔════════════════════════╗
║ Options for "setup":   ║
╠════════════════════════╩═════════╦═══════════════════════
║ -r, --reinstall                  ║ Reinstall the rootfs system
║ -n, --no-sdk                     ║ No install essential development tool
║     --edge                       ║ Use Alpine edge branch instead of stable
║     --remove-rootfs=<DIR>        ║ Delete the specified rootfs directory
║     --cache=<DIR>                ║ Set the download cache directory
║ -d, --directory-rootfs=<DIR>     ║ Set the directory for install rootfs
║     --appdir=<PACKAGE_NAME>      ║ Create rootfs in AppDir layout
╚══════════════════════════════════╩═══════════════════════
╔════════════════════════╗
║ Options for "tools":   ║
╠════════════════════════╩═════════╦═══════════════════════
║ -u, --update                     ║ Update and upgrade rootfs system
║ -e, --extract-static=<CMD> [DIR] ║ Extract static binaries from the rootfs
║ -d, --directory-rootfs=<DIR>     ║ Set the rootfs directory to be used
║ -a, --apkbuild=<APKBUILD>        ║ Compile an APKBUILD file inside the rootfs
╚══════════════════════════════════╩═══════════════════════
╔════════════════════════╗
║ Options for "aports":  ║
╠════════════════════════╩═════════╦═══════════════════════
║ -s, --search=<PKG>               ║ Search for a package in the Alpine aports
║ -g, --get=<PKG>                  ║ Download the APKBUILD in the Alpine aports
╚══════════════════════════════════╩═══════════════════════
╔════════════════════════╗
║ Options for "run":     ║
╠════════════════════════╩═════════╦═══════════════════════
║ -0, --root                       ║ Enables root mode in proot (uses -0)
║ -b, --proot-args=<ARGS>          ║ Passe additional arguments to proot
║ -d, --directory-rootfs=<DIR>     ║ Set the rootfs directory to be used
║ -c, --command=<CMD>              ║ Command to execute inside the environment
║ -i, --ignore-extra-binds         ║ Run without default extra binds
║ --                               ║ All arguments after this are passed to
║                                  ║ the command executed inside proot
╚══════════════════════════════════╩═══════════════════════
╔════════════════════════╗
║ Environment variables: ║
╠════════════════════════╩═════════╦═══════════════════════
║ ALPINEBOX_ROOTFS                 ║ Default rootfs directory, alternative -d/--directory-rootfs
║                                  ║ Default to: $HOME/.alpine-rootfs
║ ALPINEBOX_CACHE                  ║ Default cache directory for downloads, alternative --cache
║                                  ║ Default to: $HOME/.cache/alpine-rootfs
║ ALPINEBOX_SAVE_APPDIR            ║ Output directory for generated AppDirs
║                                  ║ Default: current directory
║ ALPINEBOX_CMD                    ║ Command to execute in the container, alternative -c/--command
╚══════════════════════════════════╩═══════════════════════
╔═══════════╗
║ Examples: ║
╠═══════════╩═════════════════════════════════════════════╗
║  $ AlpineBox setup --cache /tmp/cache -d ./rootfs       ║
║  $ AlpineBox run -0 -d ./rootfs -c "apk update"         ║
║  $ AlpineBox run -d ./rootfs -- /bin/sh                 ║
╚═════════════════════════════════════════════════════════╝'
exit 0
}


_print_version()
{
echo "╔══════════════════════════════════════════════════════════╗"
echo "║                  AlpineBox Version $vr                   ║"
echo "╠══════════════════════════════════════════════════════════╣"
echo "║                                                          ║"
echo "║ AlpineBox is a simple shell-based tool that allows you   ║"
echo "║ to create and manage Alpine Linux rootfs containers      ║"
echo "║ easily using PRoot.                                      ║"
echo "║                                                          ║"
echo "║ The MIT License <https://opensource.org/license/mit>     ║"
echo "║                                                          ║"
echo "╚══════════════════════════════════════════════════════════╝"
exit 0
}


_check_essential_parms()
{
    if [ "$1" = "" ] || { [ -z "$allow_dash_args" ] && case "$1" in -*) true ;; *) false ;; esac; }; then
        echo "${0##*/}: $2: $3 requires a <$4> as argument."
        echo "Usage: ${0##*/} $2 $3 <$4>"
        exit 1
    fi
    return 0
}


set -e

cwd="$(pwd)"
def_output_dir="$cwd"

test -w "$cwd" || def_output_dir="$HOME"

ALPINEBOX_ARCH="${ALPINEBOX_ARCH:-"$(uname -m)"}"
ALPINEBOX_SAVE_APPDIR="${ALPINEBOX_SAVE_APPDIR:-"$def_output_dir"}"
ALPINEBOX_ROOTFS="${ALPINEBOX_ROOTFS:-"$HOME"/.alpine-rootfs}"
ALPINEBOX_CACHE="${ALPINEBOX_CACHE:-"$HOME"/.cache/alpine-rootfs}"
ALPINEBOX_CMD="${ALPINEBOX_CMD:-}"

mirror="https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/$ALPINEBOX_ARCH/"
using_repo="latest-stable"

for arg in "$@"; do
    case "$arg" in
        tools)
            cmd="tools"
            shift
            break
            ;;
        setup)
            cmd="setup"
            shift
            break
            ;;
        run)
            cmd="run"
            shift
            break
            ;;
         aports)
            cmd="aports"
            shift
            break
            ;;
        --check-deps)
            _check_deps
            ;;
        -h|--help)
            _print_help
            ;;
        -v|--version)
            _print_version
            ;;
        *)
            echo "${0##*/}: invalid argument '$1'"
            echo "Use '${0##*/} --help' to see available options."
            exit 1
            ;;
    esac
done

test -z "$cmd" && cmd="run"

test "$cmd" = "setup" && {
    while [ "$#" -gt 0 ]; do
        case "$1" in
            --cache=*)
                ALPINEBOX_CACHE="${1#*=}"
                _check_essential_parms "$ALPINEBOX_CACHE" "setup" "$1" "directory"
                shift
                ;;
            --cache)
                ALPINEBOX_CACHE="$2"
                _check_essential_parms "$ALPINEBOX_CACHE" "setup" "$1" "directory"
                shift 2
                ;;
            -n|--no-sdk)
                shift
                no_sdk=1
                ;;
            --edge)
                shift
                using_repo="edge"
                ;;
            -r|--reinstall)
                reinstall_rootfs=1
                shift
                ;;
            --directory-rootfs=*)
                ALPINEBOX_ROOTFS="${1#*=}"
                _check_essential_parms "$ALPINEBOX_ROOTFS" "setup" "$1" "directory"
                shift
                ;;
            -d|--directory-rootfs)
                ALPINEBOX_ROOTFS="$2"
                _check_essential_parms "$ALPINEBOX_ROOTFS" "setup" "$1" "directory"
                shift 2
                ;;
            --remove-rootfs=*)
                remove_rootfs="${1#*=}"
                _check_essential_parms "$remove_rootfs" "setup" "$1" "directory"
                _remove_rootfs
                ;;
            --remove-rootfs)
                remove_rootfs="$2"
                _check_essential_parms "$remove_rootfs" "setup" "$1" "directory"
                _remove_rootfs
                ;;
            --appdir=*)
                pkg_name="${1#*=}"
                _check_essential_parms "$pkg_name" "setup" "$1" "package"
                _create_appdir
                ;;
            --appdir)
                pkg_name="$2"
                _check_essential_parms "$pkg_name" "setup" "$1" "package"
                _create_appdir
                ;;
            *)
                echo "${0##*/}: setup: invalid argument '$1'"
                echo "Use '${0##*/} --help' to see available options."
                exit 1
                ;;
        esac
    done

    _setup
    exit 0
}


test "$cmd" = "run" && {
    while [ "$#" -gt 0 ]; do
        case "$1" in
             -0|--root)
                use_root=1
                shift
                ;;
            -i|--ignore-extra-binds)
                no_extra_binds=1
                shift
                ;;
            -b|--proot-args)
                proot_args="$2"
                allow_dash_args=1
                _check_essential_parms "$proot_args" "run" "$1" "proot parameter"
                shift 2
                ;;
            --proot-args=*)
                proot_args="${1#*=}"
                allow_dash_args=1
                _check_essential_parms "$proot_args" "run" "$1" "proot parameter"
                shift
                ;;
            -d|--directory-rootfs)
                ALPINEBOX_ROOTFS="$2"
                _check_essential_parms "$ALPINEBOX_ROOTFS" "run" "$1" "directory"
                shift 2
                ;;
            --directory-rootfs=*)
                ALPINEBOX_ROOTFS="${1#*=}"
                _check_essential_parms "$ALPINEBOX_ROOTFS" "run" "$1" "directory"
                shift
                ;;
            -c|--command)
                cmd_args="$2"
                _check_essential_parms "$2" "run" "$1" "command"
                shift 2
                ;;
            --command=*)
                cmd_args="${1#*=}"
                _check_essential_parms "${1#*=}" "run" "$1" "command"
                shift
                ;;
            --)
                shift
                break
                ;;
            -*)
                echo "${0##*/}: run: invalid argument '$1'"
                echo "Use '${0##*/} --help' to see available options."
                exit 1
                ;;
            *)
                break
                ;;
        esac
    done

    cmd_args="${cmd_args:+$cmd_args }$*"
    _run
    exit 0
}


test "$cmd" = "tools" && {

    test "$#" -eq 0 && {
        echo "${0##*/}: tools: No options provided for 'tools'."
        echo "Try '${0##*/} --help' for more information."
        exit 1
    }

    n=0
    while [ "$n" -le "$#" ]; do
        eval "arg=\${$n}"
        case "$arg" in
            --directory-rootfs=*)
                ALPINEBOX_ROOTFS="${arg#*=}"
                _check_essential_parms "$ALPINEBOX_ROOTFS" "tools" "$arg" "directory"
                break
                ;;
            -d|--directory-rootfs)
                n=$(( n + 1 ))
                eval "ALPINEBOX_ROOTFS=\${$n}"
                _check_essential_parms "$ALPINEBOX_ROOTFS" "tools" "$arg" "directory"
                break
                ;;
        esac
        n=$(( n + 1 ))
    done

    while [ "$#" -gt 0 ]; do
        case "$1" in
            -u|--update)
                parm_ok=1
                _update
                break
                ;;
            -e|--extract-static)
                parm_ok=1
                extract_cmd="$2"

                test -d "$3" && extract_output="$3"

                _check_essential_parms "$extract_cmd" "tools" "$1" "command"
                _extract_static
                break
                ;;
            --extract-static=*)
                parm_ok=1
                extract_cmd="${1#*=}"

                test -d "$2" && extract_output="$2"

                _check_essential_parms "$extract_cmd" "tools" "$1" "command"
                _extract_static
                break
                ;;
            -a|--apkbuild)
                parm_ok=1
                apkbuild_local="$2"
                _apk_build
                break
                ;;
            --apkbuild=*)
                parm_ok=1
                apkbuild_local="${1#*=}"
                _apk_build
                break
                ;;
            --directory-rootfs=*)  # pass
                shift
                ;;
            -d|--directory-rootfs)  # pass
                shift 2
                ;;
            *)
                echo "${0##*/}: tools: invalid argument '$1'"
                echo "Use '${0##*/} --help' to see available options."
                exit 1
                ;;
        esac
    done

    test -z "$parm_ok" && {
        echo "${0##*/}: 'tools' requires at least one of:
    <-u|--update>
    <-a|--apkbuild>
    <-e|--extract-static>"
        echo "Try '${0##*/} --help' for more information."
        exit 1
    }

    exit 0
}

test "$cmd" = "aports" && {

    test "$#" -eq 0 && {
        echo "${0##*/}: aports: No options provided for 'aports'."
        echo "Try '${0##*/} --help' for more information."
        exit 1
    }

    while [ "$#" -gt 0 ]; do
        case "$1" in
            -s|--search)
                aports_search=1
                APORTS_PKG="$2"
                _check_essential_parms "$APORTS_PKG" "aports" "$1" "package"
                shift 2
                ;;
            --search=*)
                aports_search=1
                APORTS_PKG="${1#*=}"
                _check_essential_parms "$APORTS_PKG" "aports" "$1" "package"
                shift
                ;;
            -g|--get)
                aports_get=1
                APORTS_PKG="$2"
                _check_essential_parms "$APORTS_PKG" "aports" "$1" "package"
                shift 2
                ;;
            --get=*)
                aports_get=1
                APORTS_PKG="${1#*=}"
                _check_essential_parms "$APORTS_PKG" "aports" "$1" "package"
                shift
                ;;
            *)
                echo "${0##*/}: aports: invalid argument '$1'"
                echo "Use '${0##*/} --help' to see available options."
                exit 1
                ;;
        esac
    done
    _aports
}
